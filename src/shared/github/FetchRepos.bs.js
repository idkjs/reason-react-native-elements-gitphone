// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var Styles$Gitphone = require("../styles/Styles.bs.js");
var ButtonEl$Gitphone = require("../rnelements/ButtonEl.bs.js");
var Text$BsReactNative = require("bs-react-native/src/components/text.js");
var View$BsReactNative = require("bs-react-native/src/components/view.js");
var RNGHListItem$Gitphone = require("./RNGHListItem.bs.js");
var FlatList$BsReactNative = require("bs-react-native/src/components/flatList.js");
var ScrollView$BsReactNative = require("bs-react-native/src/components/scrollView.js");

function commitDecode(json) {
  return {
          message: Json_decode.at(/* :: */[
                  "commit",
                  /* :: */[
                    "message",
                    /* [] */0
                  ]
                ], Json_decode.string)(json),
          author_name: Json_decode.at(/* :: */[
                  "commit",
                  /* :: */[
                    "author",
                    /* :: */[
                      "name",
                      /* [] */0
                    ]
                  ]
                ], Json_decode.string)(json),
          avatar_url: Json_decode.at(/* :: */[
                  "author",
                  /* :: */[
                    "avatar_url",
                    /* [] */0
                  ]
                ], Json_decode.string)(json)
        };
}

function commits(json) {
  return Json_decode.list(commitDecode, json);
}

var Decode = /* module */[
  /* commitDecode */commitDecode,
  /* commits */commits
];

var repoUrl = "https://api.github.com/repos/react-native-training/react-native-elements/commits";

function fetchCommits(param) {
  return fetch(repoUrl).then((function (prim) {
                    return prim.json();
                  })).then((function (json) {
                  var commits = Json_decode.list(commitDecode, json);
                  return Promise.resolve(commits);
                })).catch((function (_err) {
                return Promise.resolve(undefined);
              }));
}

var component = ReasonReact.reducerComponent("FetchComponent");

function str(prim) {
  return prim;
}

function make(navigation, _children) {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (self) {
              var match = self[/* state */1];
              if (typeof match === "number") {
                switch (match) {
                  case 0 : 
                      return ReasonReact.element(undefined, undefined, View$BsReactNative.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, Caml_option.some(Styles$Gitphone.styles.container), undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined)(/* array */[ReasonReact.element(undefined, undefined, ButtonEl$Gitphone.make(Caml_option.some(Styles$Gitphone.ButtonS[/* containerStyle */0]), undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, (function (_evt) {
                                                  return Curry._1(self[/* send */3], /* LoadCommits */0);
                                                }), "FetchCommits", undefined, undefined, /* array */[]))]));
                  case 1 : 
                      return ReasonReact.element(undefined, undefined, Text$BsReactNative.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* array */["Loading..."]));
                  case 2 : 
                      return ReasonReact.element(undefined, undefined, Text$BsReactNative.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* array */["Something went wrong!"]));
                  
                }
              } else {
                var keyExtractor = function (_item, idx) {
                  return String(idx);
                };
                var commits = $$Array.of_list(match[0]);
                var renderItem = function (param) {
                  return FlatList$BsReactNative.renderItem((function (param) {
                                var item = param[/* item */0];
                                return ReasonReact.element(undefined, undefined, RNGHListItem$Gitphone.make(item.author_name, item.message, /* array */[]));
                              }), param);
                };
                return ReasonReact.element(undefined, undefined, View$BsReactNative.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, Caml_option.some(Styles$Gitphone.styles.container), undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined)(/* array */[ReasonReact.element(undefined, undefined, ScrollView$BsReactNative.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined)(/* array */[ReasonReact.element(undefined, undefined, FlatList$BsReactNative.make(commits, renderItem, keyExtractor, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined)(/* array */[]))]))]));
              }
            }),
          /* initialState */(function (param) {
              return /* NotAsked */0;
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */(function (action, _state) {
              if (typeof action === "number") {
                if (action !== 0) {
                  return /* Update */Block.__(0, [/* Failure */2]);
                } else {
                  return /* UpdateWithSideEffects */Block.__(2, [
                            /* Loading */1,
                            (function (self) {
                                fetchCommits(/* () */0).then((function (result) {
                                        if (result !== undefined) {
                                          return Promise.resolve(Curry._1(self[/* send */3], /* LoadedCommits */[result]));
                                        } else {
                                          return Promise.resolve(Curry._1(self[/* send */3], /* LoadCommitsFailed */1));
                                        }
                                      }));
                                return /* () */0;
                              })
                          ]);
                }
              } else {
                return /* Update */Block.__(0, [/* Success */[action[0]]]);
              }
            }),
          /* jsElementWrapped */component[/* jsElementWrapped */13]
        ];
}

exports.Decode = Decode;
exports.repoUrl = repoUrl;
exports.fetchCommits = fetchCommits;
exports.component = component;
exports.str = str;
exports.make = make;
/* component Not a pure module */
