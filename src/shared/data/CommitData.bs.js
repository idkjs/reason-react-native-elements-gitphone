// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");

var ValueNotFound = Caml_exceptions.create("CommitData-Gitphone.Decode.ValueNotFound");

function checkForExistance(fieldName, value) {
  if (value !== undefined) {
    return value;
  } else {
    console.log(fieldName + " is null or does not exist");
    return "";
  }
}

function commitDecode(json) {
  return {
          sha: Json_decode.field("sha", Json_decode.string, json),
          message: Json_decode.at(/* :: */[
                  "commit",
                  /* :: */[
                    "message",
                    /* [] */0
                  ]
                ], Json_decode.string)(json),
          name: Json_decode.at(/* :: */[
                  "commit",
                  /* :: */[
                    "author",
                    /* :: */[
                      "name",
                      /* [] */0
                    ]
                  ]
                ], Json_decode.string)(json),
          avatar_url: checkForExistance("avatar_url", Json_decode.optional(Json_decode.at(/* :: */[
                        "author",
                        /* :: */[
                          "avatar_url",
                          /* [] */0
                        ]
                      ], Json_decode.string), json))
        };
}

function commits(json) {
  return Json_decode.list(commitDecode, json);
}

var Decode = /* module */[
  /* ValueNotFound */ValueNotFound,
  /* checkForExistance */checkForExistance,
  /* commitDecode */commitDecode,
  /* commits */commits
];

function repoUrl(owner, repo) {
  return "https://api.github.com/repos/" + (owner + ("/" + (repo + "/commits")));
}

function fetchCommits(owner, repo) {
  return fetch(repoUrl(owner, repo)).then((function (prim) {
                    return prim.json();
                  })).then((function (json) {
                  var commits = Json_decode.list(commitDecode, json);
                  return Promise.resolve(commits);
                })).catch((function (_err) {
                return Promise.resolve(undefined);
              }));
}

exports.Decode = Decode;
exports.repoUrl = repoUrl;
exports.fetchCommits = fetchCommits;
/* No side effect */
